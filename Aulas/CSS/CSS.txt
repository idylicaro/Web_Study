A  preferencia de css é o qual ta sendo processado por ultimo

Seletores:
 * - é o universal , que aplica a toda a pagina
 Elemento - que é os elementos do html 
 .class - São classes :)
 #id - é um mecanismo de separar um elemento de forma que ele seja unico
 [atributo] = atributos e atributos-personalizado
 :pseudo-class -
 ::pseudo-elemento -

 /*Combinações de seletores*/
 + - irmão adjacente
 ~ - irmão geral
 > - filho
 seletor1 seletor2 - qualquer elemento descendente 
 , - agrupar o mesmo tipo de css para varios tipos de seletores


 especifidades css:
        1. regra com !important (Evitar)
        2. seletores mais especificos [calculadora (https://specificity.keegan.st/)]
        3. ultima regra processada(empate)

    exemplo de ordem de especifidades:
        1. inline
        2. id
        3. class, pseudo-class, atributo
        4. elemento, pseudo-elementos


* para que o atributo herde(quando por padrão ele n vai herdar) vc pode usar o nome-Atributo: inherit;

BOX MODEL:
Margin>border>padding>content


* para evitar o margin-collapse vc pode por um float: left / right;

* display - A displaypropriedade especifica o comportamento de exibição (o tipo de caixa de renderização) de um elemento.
            display: block;
            display: inline
            display: none;
            display: inline-block;

* OverFLOW:
    overflow: hidden;
    overflow: scroll;

* Unidades: 
    Absoluto
        px
    ViewPort 
        vh  
        vw
        vmin
        vmax
    Fontes 
        rem relativa 
        em  relativa a tag pai

    
* Ao ter um elemento pai com a posição relativa, o filho quando se tem a posição Absoluta essa posição ela é Absoluta dentro do pai.

* MediaQuery - como se fosse um if para aplicar determinado o layout (ajudando na responsividade)


FLEX BOX(Unidimensional)
    Quando marca um elemento com a propriedade display:flex ele se torna um flex container e tem flex item 
    main start main size main end
    cross start cross size cross end
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;  /*overflow agora quebra linha mesmo que a main direction esteja em row*/
            /*flex-flow é uma junção das propriedades flex-direction e flex-wrap.*/

            justify-content: center; 
            /*justify-content define como o navegador distribui espaço entre e ao redor de itens de conteúdo ao longo do eixo principal de um contêiner flexível e o eixo embutido de um contêiner de grade.*/
            

CSS GRID(Bidimensional)
    display: grid;
    grid-template-columns:
    grid-template-rows:

    grid-column-start
    grid-column-end
    grid-row-start
    grid-row-end

    *dando nomes as linhas:
            grid-template-columns: [inicio] 1fr 
            [metade-1 meio-1] 1fr 
            [metade-2 meio-2] 1fr [fim];
    
    grid-column-gap:20px;
